security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'

#    password_hashers:
#        # auto hasher with default options for the User class (and children)
#        App\Entity\User: 'auto'
#
#        # auto hasher with custom options for all PasswordAuthenticatedUserInterface instances
#        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
#            algorithm: 'auto'
#            cost: 15

    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
#        users_in_memory: { memory: null }
    providers:
        database:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        login:
            pattern: ^/api/login
            stateless: true
#            anonymous: true
            json_login:
                check_path: /api/login_check
                username_path: email
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

#        main:
#            lazy: true
#            provider: users_in_memory
        api:
            pattern:   ^/api
            stateless: true
            jwt: ~
#            guard:
#                authenticators:
#                    lexik_jwt_authentication.jwt_token_authenticator


    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/api/login, roles: PUBLIC_ACCESS }
        - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }
#        - { path: ^/api/logout, roles: PUBLIC_ACCESS }
#        - { path: ^/api/expenses?page=1, roles: PUBLIC_ACCESS }

            #        - { path: ^/, allow_if: "!is_authenticated()"  }


            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true



when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
